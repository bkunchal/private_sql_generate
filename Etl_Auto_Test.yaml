name: ETL Pipeline Testing with PySpark

on:
  push:
    branches:
      - "main"
      - "ci/*"
  pull_request:
    branches:
      - "main"

jobs:
  etl-tests:
    name: Run ETL Tests with PySpark
    runs-on: aexp-ubuntu-latest-medium

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Set JAVA_HOME
        run: |
          echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV
          echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV

      - name: Verify Java Installation
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          ls -al $JAVA_HOME
          java -version

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Python Dependencies
        run: pip install -r requirements.txt

      - name: Identify Changed Files Dynamically
        id: identify-changed-files
        run: |
          # Fetch the last two commits to check for differences
          git fetch origin HEAD~1:refs/remotes/origin/prev && git fetch origin HEAD
          # Compare the last two commits to identify changed files
          changed_files=$(git diff --name-only origin/prev HEAD)
          echo "Changed files: $changed_files"
          echo "::set-output name=changed_files::$changed_files"

      - name: Determine Affected Tests from Mapping
        id: determine-affected-tests
        run: |
          echo "Determining affected tests based on changed files..."
          affected_tests=()
          for file in ${{ steps.identify-changed-files.outputs.changed_files }}; do
            echo "Checking file: $file"
            test_file=$(jq --arg changed_file "$file" -r '
              to_entries[] | select(.value.config == $changed_file or .value.test == $changed_file) | .value.test
            ' mapping.json)
            if [ "$test_file" != "null" ]; then
              affected_tests+=("$test_file")
            fi
          done
          echo "Affected tests: ${affected_tests[@]}"
          echo "::set-output name=affected_tests::${affected_tests[@]}"

      - name: Run Tests for Affected Tables
        if: steps.determine-affected-tests.outputs.affected_tests != ''
        run: |
          echo "Running affected tests..."
          for test_file in ${{ steps.determine-affected-tests.outputs.affected_tests }}; do
            echo "Running: $test_file"
            python "$test_file"
          done